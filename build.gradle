/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.7/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
    
    // Apply the jacoco plugin for code coverage analysis
    id 'jacoco'
    
    // Apply the jdepend plugin for code dependency analysis
    id 'jdepend'
    
    // Apply the checkstyle plugin for code style static analysis
    id 'checkstyle'
    
    // Apply the findbugs plugin for code quality static analysis
    id "com.github.spotbugs" version "1.6.2"
    
}

compileJava.options.fork = true
compileJava.options.forkOptions.executable = '/opt/java/jdk-10.0.1/bin/javac'

// Define the main class for the application
mainClassName = 'Driver'

if(JavaVersion.current() != JavaVersion.VERSION_1_8){
    throw new GradleException("This build must be run with java 8")
} else {
	println "Running Java 8"
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    // testCompile 'junit:junit:5.0'
    
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    jcenter()
}

test {
    useJUnitPlatform()
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    //options.addBooleanOption('html5', true)
}

spotbugs {
  effort = "max"
  reportLevel = "low"
  includeFilter = file("config/findbugs/ExcludeFilter.xml")
}
tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled = true
    html.enabled = false
  }
}

jacocoTestReport {
    reports {
        xml.enabled false
        html.enabled true
    }
}

checkstyle {
    toolVersion '8.12'
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

check.dependsOn jacocoTestReport